import Crypto
import Crypto.PublicKey
import gmpy2

c = 55037001781716071464004503135512468237260686931928083874649315239081326584026924359245736017904013101153375656506018166769570549706618120104105453926692
e = 229204594518536338931396266744982722851359380385517411185213013482829999856673242216843469592795860897494001553437134653799570132436696142286941516621769
n = gmpy2.mpz(738051462805444594851499859699968662479350763420978752056627294425480620684992455994943989481545527299715700863819271237507988690564692145696558468863007)

a = gmpy2.isqrt(n) + 1

while True:
    b_squared = a**2 - n
    if gmpy2.is_square(b_squared):
        b = gmpy2.isqrt(b_squared)
        p = a + b
        q = a - b
        print(f"p = {p}")
        print(f"q = {q}")
        break
    a += 1

phi = (p-1)*(q-1)
d = Crypto.Util.number.inverse(e, phi)
m = pow(c, d, n)

print(m.to_bytes((m.bit_length() + 7) // 8, 'big').decode())